# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._inputs import *
import pulumi_google_native

__all__ = ['TwingateRegionArgs', 'TwingateRegion']

@pulumi.input_type
class TwingateRegionArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 connectors: pulumi.Input[Sequence[pulumi.Input['TwingateConnectorArgs']]],
                 network: pulumi.Input[str],
                 project: pulumi.Input[str],
                 region: pulumi.Input[str]):
        """
        The set of arguments for constructing a TwingateRegion resource.
        :param pulumi.Input[str] cidr: CIDR of the created subnetwork.
        :param pulumi.Input[Sequence[pulumi.Input['TwingateConnectorArgs']]] connectors: CIDR of the created subnetwork.
        :param pulumi.Input[str] network: The GCP network id.
        :param pulumi.Input[str] project: The GCP project id.
        :param pulumi.Input[str] region: The GCP region.
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "connectors", connectors)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        CIDR of the created subnetwork.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def connectors(self) -> pulumi.Input[Sequence[pulumi.Input['TwingateConnectorArgs']]]:
        """
        CIDR of the created subnetwork.
        """
        return pulumi.get(self, "connectors")

    @connectors.setter
    def connectors(self, value: pulumi.Input[Sequence[pulumi.Input['TwingateConnectorArgs']]]):
        pulumi.set(self, "connectors", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        """
        The GCP network id.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The GCP project id.
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The GCP region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


class TwingateRegion(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TwingateConnectorArgs']]]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a TwingateRegion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cidr: CIDR of the created subnetwork.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TwingateConnectorArgs']]]] connectors: CIDR of the created subnetwork.
        :param pulumi.Input[str] network: The GCP network id.
        :param pulumi.Input[str] project: The GCP project id.
        :param pulumi.Input[str] region: The GCP region.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TwingateRegionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a TwingateRegion resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TwingateRegionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TwingateRegionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr: Optional[pulumi.Input[str]] = None,
                 connectors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TwingateConnectorArgs']]]]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TwingateRegionArgs.__new__(TwingateRegionArgs)

            if cidr is None and not opts.urn:
                raise TypeError("Missing required property 'cidr'")
            __props__.__dict__["cidr"] = cidr
            if connectors is None and not opts.urn:
                raise TypeError("Missing required property 'connectors'")
            __props__.__dict__["connectors"] = connectors
            if network is None and not opts.urn:
                raise TypeError("Missing required property 'network'")
            __props__.__dict__["network"] = network
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            __props__.__dict__["addresses"] = None
            __props__.__dict__["instances"] = None
            __props__.__dict__["subnetwork"] = None
        super(TwingateRegion, __self__).__init__(
            'google-twingate:connector:TwingateRegion',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def addresses(self) -> pulumi.Output[Sequence['pulumi_google_native.compute.v1.Address']]:
        """
        The subnetwork resource.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def instances(self) -> pulumi.Output[Sequence['pulumi_google_native.compute.v1.Instance']]:
        """
        The subnetwork resource.
        """
        return pulumi.get(self, "instances")

    @property
    @pulumi.getter
    def subnetwork(self) -> pulumi.Output['pulumi_google_native.compute.v1.Subnetwork']:
        """
        The subnetwork resource.
        """
        return pulumi.get(self, "subnetwork")

