// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connector

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	compute "github.com/pulumi/pulumi-google-native/sdk/go/google/compute/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TwingateRegion struct {
	pulumi.ResourceState

	// The subnetwork resource.
	Addresses compute.AddressArrayOutput `pulumi:"addresses"`
	// The subnetwork resource.
	Instances compute.InstanceArrayOutput `pulumi:"instances"`
	// The subnetwork resource.
	Subnetwork compute.SubnetworkOutput `pulumi:"subnetwork"`
}

// NewTwingateRegion registers a new resource with the given unique name, arguments, and options.
func NewTwingateRegion(ctx *pulumi.Context,
	name string, args *TwingateRegionArgs, opts ...pulumi.ResourceOption) (*TwingateRegion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.Connectors == nil {
		return nil, errors.New("invalid value for required argument 'Connectors'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource TwingateRegion
	err := ctx.RegisterRemoteComponentResource("google-twingate:connector:TwingateRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type twingateRegionArgs struct {
	// CIDR of the created subnetwork.
	Cidr string `pulumi:"cidr"`
	// CIDR of the created subnetwork.
	Connectors []TwingateConnector `pulumi:"connectors"`
	// The GCP network id.
	Network string `pulumi:"network"`
	// The GCP project id.
	Project string `pulumi:"project"`
	// The GCP region.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a TwingateRegion resource.
type TwingateRegionArgs struct {
	// CIDR of the created subnetwork.
	Cidr pulumi.StringInput
	// CIDR of the created subnetwork.
	Connectors TwingateConnectorArrayInput
	// The GCP network id.
	Network pulumi.StringInput
	// The GCP project id.
	Project pulumi.StringInput
	// The GCP region.
	Region pulumi.StringInput
}

func (TwingateRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*twingateRegionArgs)(nil)).Elem()
}

type TwingateRegionInput interface {
	pulumi.Input

	ToTwingateRegionOutput() TwingateRegionOutput
	ToTwingateRegionOutputWithContext(ctx context.Context) TwingateRegionOutput
}

func (*TwingateRegion) ElementType() reflect.Type {
	return reflect.TypeOf((**TwingateRegion)(nil)).Elem()
}

func (i *TwingateRegion) ToTwingateRegionOutput() TwingateRegionOutput {
	return i.ToTwingateRegionOutputWithContext(context.Background())
}

func (i *TwingateRegion) ToTwingateRegionOutputWithContext(ctx context.Context) TwingateRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateRegionOutput)
}

// TwingateRegionArrayInput is an input type that accepts TwingateRegionArray and TwingateRegionArrayOutput values.
// You can construct a concrete instance of `TwingateRegionArrayInput` via:
//
//          TwingateRegionArray{ TwingateRegionArgs{...} }
type TwingateRegionArrayInput interface {
	pulumi.Input

	ToTwingateRegionArrayOutput() TwingateRegionArrayOutput
	ToTwingateRegionArrayOutputWithContext(context.Context) TwingateRegionArrayOutput
}

type TwingateRegionArray []TwingateRegionInput

func (TwingateRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TwingateRegion)(nil)).Elem()
}

func (i TwingateRegionArray) ToTwingateRegionArrayOutput() TwingateRegionArrayOutput {
	return i.ToTwingateRegionArrayOutputWithContext(context.Background())
}

func (i TwingateRegionArray) ToTwingateRegionArrayOutputWithContext(ctx context.Context) TwingateRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateRegionArrayOutput)
}

// TwingateRegionMapInput is an input type that accepts TwingateRegionMap and TwingateRegionMapOutput values.
// You can construct a concrete instance of `TwingateRegionMapInput` via:
//
//          TwingateRegionMap{ "key": TwingateRegionArgs{...} }
type TwingateRegionMapInput interface {
	pulumi.Input

	ToTwingateRegionMapOutput() TwingateRegionMapOutput
	ToTwingateRegionMapOutputWithContext(context.Context) TwingateRegionMapOutput
}

type TwingateRegionMap map[string]TwingateRegionInput

func (TwingateRegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TwingateRegion)(nil)).Elem()
}

func (i TwingateRegionMap) ToTwingateRegionMapOutput() TwingateRegionMapOutput {
	return i.ToTwingateRegionMapOutputWithContext(context.Background())
}

func (i TwingateRegionMap) ToTwingateRegionMapOutputWithContext(ctx context.Context) TwingateRegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateRegionMapOutput)
}

type TwingateRegionOutput struct{ *pulumi.OutputState }

func (TwingateRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TwingateRegion)(nil)).Elem()
}

func (o TwingateRegionOutput) ToTwingateRegionOutput() TwingateRegionOutput {
	return o
}

func (o TwingateRegionOutput) ToTwingateRegionOutputWithContext(ctx context.Context) TwingateRegionOutput {
	return o
}

type TwingateRegionArrayOutput struct{ *pulumi.OutputState }

func (TwingateRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TwingateRegion)(nil)).Elem()
}

func (o TwingateRegionArrayOutput) ToTwingateRegionArrayOutput() TwingateRegionArrayOutput {
	return o
}

func (o TwingateRegionArrayOutput) ToTwingateRegionArrayOutputWithContext(ctx context.Context) TwingateRegionArrayOutput {
	return o
}

func (o TwingateRegionArrayOutput) Index(i pulumi.IntInput) TwingateRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TwingateRegion {
		return vs[0].([]*TwingateRegion)[vs[1].(int)]
	}).(TwingateRegionOutput)
}

type TwingateRegionMapOutput struct{ *pulumi.OutputState }

func (TwingateRegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TwingateRegion)(nil)).Elem()
}

func (o TwingateRegionMapOutput) ToTwingateRegionMapOutput() TwingateRegionMapOutput {
	return o
}

func (o TwingateRegionMapOutput) ToTwingateRegionMapOutputWithContext(ctx context.Context) TwingateRegionMapOutput {
	return o
}

func (o TwingateRegionMapOutput) MapIndex(k pulumi.StringInput) TwingateRegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TwingateRegion {
		return vs[0].(map[string]*TwingateRegion)[vs[1].(string)]
	}).(TwingateRegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateRegionInput)(nil)).Elem(), &TwingateRegion{})
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateRegionArrayInput)(nil)).Elem(), TwingateRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateRegionMapInput)(nil)).Elem(), TwingateRegionMap{})
	pulumi.RegisterOutputType(TwingateRegionOutput{})
	pulumi.RegisterOutputType(TwingateRegionArrayOutput{})
	pulumi.RegisterOutputType(TwingateRegionMapOutput{})
}
