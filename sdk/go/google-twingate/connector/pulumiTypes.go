// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package connector

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Describes the connector instance
type TwingateConnector struct {
	// Access token from Twingate.
	AccessToken *string `pulumi:"accessToken"`
	// Name of the connector.
	Name *string `pulumi:"name"`
	// Refresh token from Twingate.
	RefreshToken *string `pulumi:"refreshToken"`
	// GCP availability zone.
	Zone *string `pulumi:"zone"`
}

// TwingateConnectorInput is an input type that accepts TwingateConnectorArgs and TwingateConnectorOutput values.
// You can construct a concrete instance of `TwingateConnectorInput` via:
//
//          TwingateConnectorArgs{...}
type TwingateConnectorInput interface {
	pulumi.Input

	ToTwingateConnectorOutput() TwingateConnectorOutput
	ToTwingateConnectorOutputWithContext(context.Context) TwingateConnectorOutput
}

// Describes the connector instance
type TwingateConnectorArgs struct {
	// Access token from Twingate.
	AccessToken pulumi.StringPtrInput `pulumi:"accessToken"`
	// Name of the connector.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Refresh token from Twingate.
	RefreshToken pulumi.StringPtrInput `pulumi:"refreshToken"`
	// GCP availability zone.
	Zone pulumi.StringPtrInput `pulumi:"zone"`
}

func (TwingateConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TwingateConnector)(nil)).Elem()
}

func (i TwingateConnectorArgs) ToTwingateConnectorOutput() TwingateConnectorOutput {
	return i.ToTwingateConnectorOutputWithContext(context.Background())
}

func (i TwingateConnectorArgs) ToTwingateConnectorOutputWithContext(ctx context.Context) TwingateConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateConnectorOutput)
}

// TwingateConnectorArrayInput is an input type that accepts TwingateConnectorArray and TwingateConnectorArrayOutput values.
// You can construct a concrete instance of `TwingateConnectorArrayInput` via:
//
//          TwingateConnectorArray{ TwingateConnectorArgs{...} }
type TwingateConnectorArrayInput interface {
	pulumi.Input

	ToTwingateConnectorArrayOutput() TwingateConnectorArrayOutput
	ToTwingateConnectorArrayOutputWithContext(context.Context) TwingateConnectorArrayOutput
}

type TwingateConnectorArray []TwingateConnectorInput

func (TwingateConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TwingateConnector)(nil)).Elem()
}

func (i TwingateConnectorArray) ToTwingateConnectorArrayOutput() TwingateConnectorArrayOutput {
	return i.ToTwingateConnectorArrayOutputWithContext(context.Background())
}

func (i TwingateConnectorArray) ToTwingateConnectorArrayOutputWithContext(ctx context.Context) TwingateConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TwingateConnectorArrayOutput)
}

// Describes the connector instance
type TwingateConnectorOutput struct{ *pulumi.OutputState }

func (TwingateConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TwingateConnector)(nil)).Elem()
}

func (o TwingateConnectorOutput) ToTwingateConnectorOutput() TwingateConnectorOutput {
	return o
}

func (o TwingateConnectorOutput) ToTwingateConnectorOutputWithContext(ctx context.Context) TwingateConnectorOutput {
	return o
}

// Access token from Twingate.
func (o TwingateConnectorOutput) AccessToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwingateConnector) *string { return v.AccessToken }).(pulumi.StringPtrOutput)
}

// Name of the connector.
func (o TwingateConnectorOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwingateConnector) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Refresh token from Twingate.
func (o TwingateConnectorOutput) RefreshToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwingateConnector) *string { return v.RefreshToken }).(pulumi.StringPtrOutput)
}

// GCP availability zone.
func (o TwingateConnectorOutput) Zone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TwingateConnector) *string { return v.Zone }).(pulumi.StringPtrOutput)
}

type TwingateConnectorArrayOutput struct{ *pulumi.OutputState }

func (TwingateConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TwingateConnector)(nil)).Elem()
}

func (o TwingateConnectorArrayOutput) ToTwingateConnectorArrayOutput() TwingateConnectorArrayOutput {
	return o
}

func (o TwingateConnectorArrayOutput) ToTwingateConnectorArrayOutputWithContext(ctx context.Context) TwingateConnectorArrayOutput {
	return o
}

func (o TwingateConnectorArrayOutput) Index(i pulumi.IntInput) TwingateConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TwingateConnector {
		return vs[0].([]TwingateConnector)[vs[1].(int)]
	}).(TwingateConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateConnectorInput)(nil)).Elem(), TwingateConnectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TwingateConnectorArrayInput)(nil)).Elem(), TwingateConnectorArray{})
	pulumi.RegisterOutputType(TwingateConnectorOutput{})
	pulumi.RegisterOutputType(TwingateConnectorArrayOutput{})
}
